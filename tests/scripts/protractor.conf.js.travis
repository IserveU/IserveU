var browserstack = require('browserstack-local');
var defaultConfig = require('./tests/e2e/config.json');


exports.config = {
   suites: defaultConfig.suites,

  'seleniumAddress': 'http://hub-cloud.browserstack.com/wd/hub',

  'baseUrl': process.env.BASE_URL || 'http://iserveu.local/', // change this to your local


  'commonCapabilities': {
    'browserstack.user':    process.env.BROWSERSTACK_USERNAME,
    'browserstack.key':     process.env.BROWSERSTACK_ACCESS_KEY,
    'build':                process.env.BROWSERSTACK_AUTOMATE_BUILD     || 'protractor-browserstack',
    'name':                 process.env.BROWSERSTACK_AUTOMATE_PROJECT   || 'parallel_local_test',
    'browserstack.local':   process.env.BROWSERSTACK_LOCAL        || true,
    'browserstack.debug':   process.env.BROWSERSTACK_DEBUG        || 'false'
  },

  'multiCapabilities': [{
    'browserName': 'Chrome',
    'browser_version': '55.0',
    'resolution': '1920x1080',
    'os': 'Windows',
    'os_version': '7'
  }],


  framework: 'jasmine2',

  allScriptsTimeout: 120000,
  getPageTimeout: 120000,
  jasmineNodeOpts: {
      showColors: true,
      defaultTimeoutInterval: 120000,
      realtimeFailure: true
  },

  'maxSessions': 1, //Because front end tests interact with the database

  // Code to start browserstack local before start of test
  beforeLaunch: function(){
    console.log("Connecting local");
    return new Promise(function(resolve, reject){
      exports.bs_local = new browserstack.Local();
      exports.bs_local.start({'key': exports.config.commonCapabilities['browserstack.key'] }, function(error) {
        if (error) return reject(error);
        console.log('Connected. Now testing...');

        resolve();
      });
    });
  },

  onPrepare: function() {
        browser.driver.manage().window().maximize();
        
        var disableNgAnimate = function() {
            angular
                .module('disableNgAnimate', [])
                .run(['$animate', function($animate) {
                    $animate.enabled(false);
                }]);
        };

        var disableCssAnimate = function() {
            angular
                .module('disableCssAnimate', [])
                .run(function() {
                    var style = document.createElement('style');
                    style.type = 'text/css';
                    style.innerHTML = '* {' +
                        '-webkit-transition: none !important;' +
                        '-moz-transition: none !important' +
                        '-o-transition: none !important' +
                        '-ms-transition: none !important' +
                        'transition: none !important' +
                        '}';
                    document.getElementsByTagName('head')[0].appendChild(style);
                });
        };

       // Breaks Angular Material Buttons browser.addMockModule('disableNgAnimate', disableNgAnimate);
       // Breaks Angular Material Buttons browser.addMockModule('disableCssAnimate', disableCssAnimate);
  },


  // Code to stop browserstack local after end of test
  afterLaunch: function(){
    return new Promise(function(resolve, reject){
      exports.bs_local.stop(resolve);
    });
  }

};


// Code to support common capabilities
exports.config.multiCapabilities.forEach(function(caps){
  for(var i in exports.config.commonCapabilities) caps[i] = caps[i] || exports.config.commonCapabilities[i];
});